// <auto-generated />
using System;
using ApplyForClaimApplication.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApplyForClaimApplication.Migrations
{
    [DbContext(typeof(ApplyClaimDBContext))]
    [Migration("20241024074116_Changes")]
    partial class Changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplyForClaimApplication.Models.ClaimData", b =>
                {
                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimType")
                        .HasColumnType("int");

                    b.Property<string>("ClaimantEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfIncident")
                        .HasColumnType("datetime2");

                    b.HasKey("ClaimId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.ClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes");
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.DocumentData", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<byte[]>("AddressProof")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("CancelledCheck")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DeathCertificate")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Others")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PolicyCertificate")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Settlementform")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.Policy", b =>
                {
                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InsuredName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyType")
                        .HasColumnType("int");

                    b.HasKey("PolicyNumber");

                    b.HasIndex("PolicyType");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.ClaimData", b =>
                {
                    b.HasOne("ApplyForClaimApplication.Models.ClaimType", null)
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.DocumentData", b =>
                {
                    b.HasOne("ApplyForClaimApplication.Models.ClaimData", "claim")
                        .WithMany("Documents")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("claim");
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.Policy", b =>
                {
                    b.HasOne("ApplyForClaimApplication.Models.ClaimType", null)
                        .WithMany()
                        .HasForeignKey("PolicyType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplyForClaimApplication.Models.ClaimData", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
